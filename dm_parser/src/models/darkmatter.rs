use super::{content_type::ContentType, sentiment::Sentiment, toc::TocItem};
use lingua::Language;
use serde::{Deserialize, Serialize};

pub trait DmStage {
    type SH;
    type MaxNesting;
    type TOC;
    type TTR;
    type SENT;
    type IMG;
    type Links;
}

/// Types for Darkmatter in the initial gathering period
pub struct DmInitial;
impl DmStage for DmInitial {
    type SH = bool;
    type TOC = bool;
    type MaxNesting = bool;
    type TTR = bool;
    type SENT = bool;
    type IMG = bool;
    type Links = bool;
}

pub struct DmWhileParsing;
impl DmStage for DmWhileParsing {
    type SH = Option<u64>;
    type TOC = Option<TocItem>;
    type MaxNesting = Option<i32>;
    type TTR = bool;
    type SENT = bool;
    type IMG = Vec<String>;
    type Links = Vec<String>;
}

/// Finalized Darkmatter types
pub struct DmFinal;
impl DmStage for DmFinal {
    type SH = u64;
    type TOC = TocItem;
    type MaxNesting = i32;
    type TTR = u8;
    type SENT = Option<Sentiment>;
    type IMG = Vec<String>;
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Darkmatter<T: DmStage> {
    /// The content-type for this document
    content_type: ContentType,
    /// The word_tokens generated by eliminating stop words for the language
    /// and then stemming. This is only available if configured for.
    word_tokens: Vec<String>,
    /// The assumed language for the content. This will come from language
    /// detection features if configured but can also come from a default
    /// language set in the configuration.
    language: Option<Language>,
    /// The very simple (and fast) estimated time to read (in minutes)
    time_to_read: u8,
    /// The complexity of the reading material based on the
    /// Flesch Kincaid readability test.
    complexity: Option<f64>,
    /// The pos/neg sentiment detected in the document
    sentiment: Option<f64>,

    /// The maximum depth/nesting level the page goes to; this becomes available
    /// only after HTML has been parsed.
    max_nesting: T::MaxNesting,

    /// A hash of the table-of-contents which indicates whether
    /// the structure of the document has changed. Available after
    /// HTML has been parsed.
    structure_hash: T::SH,

    /// A hierarchical representation of the table of contents
    /// defined by H1..H6. This becomes available after parsing HTML.
    toc: T::TOC,

    /// A list of all the image references on the page along with validity
    /// checking of the links (if configured to do so).
    images: T::IMG,

    /// a list of all the link references on the page along with the validity
    /// of the link (if configured to do so).
    links: T::Links,
}
